SOCKET PROGRAMMING-
*********Server-side Code â€“ 
import java.net.*;
import java.io.*;

public class Server {
    public static void main(String[] args) {
        try {
            ServerSocket server = new ServerSocket(3001); // Create a server socket on port 3001
            System.out.println("Server started. Waiting for a client ...");
            Socket s = server.accept(); // Wait for a client to connect
            System.out.println("Connected!!!"); // Print a message when connected
            DataOutputStream dos = new DataOutputStream(s.getOutputStream()); // Create a DataOutputStream to send data to the client
            dos.writeUTF("Hello!!!!"); // Send a message to the client
            dos.close();
            s.close();
            server.close();
        } catch (Exception e) {
            e.printStackTrace(); // Print any exceptions that occur
        }
    }
}
********Client-Side Code-
import java.net.*;
import java.io.*;

public class Client {
    public static void main(String[] args) {
        try {
            Socket s = new Socket("127.0.0.1", 3001); // Connect to the server at IP address "192.168.214.219" on port 3001
            DataInputStream dis = new DataInputStream(s.getInputStream()); // Create a DataInputStream to receive data from the server
            String msg = dis.readUTF(); // Read the message sent by the server
            System.out.println("Message from server: " + msg); // Print the received message
            dis.close();
            s.close();
        } catch (Exception e) {
            e.printStackTrace(); // Print any exceptions that occur
        }
    }
}
********************************************************
CLASS OF IP ADDRESS- 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void extractIpAddress(unsigned char *sourceString, short *ipAddress) {
    unsigned short len = 0;
    unsigned char oct[4] = {0}, cnt = 0, cnt1 = 0, buf[5];
    
    len = strlen((const char *)sourceString);
    for (int i = 0; i < len; i++) {
        if (sourceString[i] != '.') {
            buf[cnt++] = sourceString[i];
        }
        if (sourceString[i] == '.' || i == len - 1) {
            buf[cnt] = '\0';
            cnt = 0;
            oct[cnt1++] = atoi((const char *)buf);
        }
    }
    
    ipAddress[0] = oct[0];
    ipAddress[1] = oct[1];
    ipAddress[2] = oct[2];
    ipAddress[3] = oct[3];
}

int main() {
    unsigned char ip[20] = {0};
    short ipAddress[4];
    
    printf("Enter IP address (192.168.81.219 format): ");
    scanf("%s", ip);
    
    extractIpAddress(ip, &ipAddress[0]);
    
    printf("\nIp Address: %03d. %03d. %03d. %03d\n", ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
    
    if (ipAddress[0] >= 1 && ipAddress[0] <= 126) {
        printf("Class A IP Address.\n");
    } else if (ipAddress[0] >= 128 && ipAddress[0] <= 191) {
        printf("Class B IP Address.\n");
    } else if (ipAddress[0] >= 192 && ipAddress[0] <= 223) {
        printf("Class C IP Address.\n");
    } else if (ipAddress[0] >= 224 && ipAddress[0] <= 239) {
        printf("Class D IP Address.\n");
    } else if (ipAddress[0] >= 240 && ipAddress[0] <= 255) {
        printf("Class E IP Address.\n");
    } else {
        printf("Invalid IP Address.\n");
    }

    if (ipAddress[0] == 10 || (ipAddress[0] == 172 && (ipAddress[1] >= 16 && ipAddress[1] <= 31)) || (ipAddress[0] == 192 && ipAddress[1] == 168)) {
        printf("Private IP Address.\n");
    } else {
        printf("Public IP Address.\n");
    }
    
    return 0;
}
****************************************************************
ASCII CODES USING CRC-
#include <stdio.h>

int main() {
    int i, j, k, l; // Get Frame 
    int fs; 
    printf("\nEnter Frame size: "); 
    scanf("%d", &fs); 
    int f[20]; 
    printf("\nEnter Frame: "); 
    for (i = 0; i < fs; i++) { 
        scanf("%d", &f[i]); 
    } 

    // Get Generator 
    int gs; 
    printf("\nEnter Generator size: "); 
    scanf("%d", &gs); 
    int g[20]; 
    printf("\nEnter Generator: "); 
    for (i = 0; i < gs; i++) { 
        scanf("%d", &g[i]); 
    } 

    printf("\nSender Side:"); 
    printf("\nFrame: "); 
    for (i = 0; i < fs; i++) { 
        printf("%d", f[i]); 
    } 
    printf("\nGenerator: "); 
    for (i = 0; i < gs; i++) { 
        printf("%d", g[i]); 
    } 

    // Append 0's 
    int rs = gs - 1; 
    printf("\nNumber of 0's to be appended: %d", rs); 
    for (i = fs; i < fs + rs; i++) { 
        f[i] = 0; 
    } 
    int temp[20]; 
    for (i = 0; i < 20; i++) { 
        temp[i] = f[i]; 
    } 
    printf("\nMessage after appending 0's: "); 
    for (i = 0; i < fs + rs; i++) { 
        printf("%d", temp[i]); 
    } 

    // Division 
    for (i = 0; i < fs; i++) { 
        j = 0; 
        k = i; 
        // check whether it is divisible or not 
        if (temp[k] >= g[j]) { 
            for (j = 0, k = i; j < gs; j++, k++) { 
                if ((temp[k] == 1 && g[j] == 1) || (temp[k] == 0 && g[j] == 0)) { 
                    temp[k] = 0; 
                } else { 
                    temp[k] = 1; 
                } 
            } 
        } 
    } 

    // CRC 
    int crc[15]; 
    for (i = 0, j = fs; i < rs; i++, j++) { 
        crc[i] = temp[j]; 
    } 
    printf("\nCRC bits: "); 
    for (i = 0; i < rs; i++) { 
        printf("%d", crc[i]); 
    } 

    printf("\nTransmitted Frame: "); 
    int tf[15]; 
    for (i = 0; i < fs; i++) { 
        tf[i] = f[i]; 
    } 
    for (i = fs, j = 0; i < fs + rs; i++, j++) { 
        tf[i] = crc[j]; 
    } 
    for (i = 0; i < fs + rs; i++) { 
        printf("%d", tf[i]); 
    } 

    printf("\nReceiver side: "); 
    printf("\nReceived Frame: "); 
    for (i = 0; i < fs + rs; i++) { 
        printf("%d", tf[i]); 
    } 
    for (i = 0; i < fs + rs; i++) { 
        temp[i] = tf[i]; 
    } 

    // Division 
    for (i = 0; i < fs + rs; i++) { 
        j = 0; 
        k = i; 
        if (temp[k] >= g[j]) { 
            for (j = 0, k = i; j < gs; j++, k++) { 
                if ((temp[k] == 1 && g[j] == 1) || (temp[k] == 0 && g[j] == 0)) { 
                    temp[k] = 0; 
                } else { 
                    temp[k] = 1; 
                } 
            } 
        } 
    } 

    printf("\nRemainder: "); 
    int rrem[15]; 
    for (i = fs, j = 0; i < fs + rs; i++, j++) { 
        rrem[j] = temp[i]; 
    } 
    for (i = 0; i < rs; i++) { 
        printf("%d", rrem[i]); 
    } 
    int flag = 0; 
    for (i = 0; i < rs; i++) { 
        if (rrem[i] != 0) { 
            flag = 1; 
        } 
    } 
    if (flag == 0) { 
        printf("\nSince Remainder Is 0 Hence Message Transmitted From Sender To Receiver Is Correct"); 
    } else { 
        printf("\nSince Remainder Is Not 0 Hence Message Transmitted From Sender To Receiver Contains Error"); 
    } 
    return 0; 
}
***************************************************
ASCII CODES USING HAMMING CODES-
#include <iostream> 
using namespace std; 

int main() { 
    int data[10]; 
    int dataatrec[10], c, c1, c2, c3, i; 
    
    cout << "Enter 4 bits of data one by one\n"; 
    cin >> data[7]; 
    cin >> data[6]; 
    cin >> data[5]; 
    cin >> data[3]; 

    // Calculation of even parity 
    data[4] = data[5] ^ data[6] ^ data[7]; 
    data[2] = data[3] ^ data[6] ^ data[7]; 
    data[1] = data[3] ^ data[5] ^ data[7]; 

    cout << "\nEncoded data is\n"; 
    for (i = 1; i <= 7; i++) 
        cout << data[i]; 

    cout << "\n\nEnter received data bits one by one\n"; 
    for (i = 1; i <= 7; i++) 
        cin >> dataatrec[i]; 

    c1 = dataatrec[1] ^ dataatrec[3] ^ dataatrec[5] ^ dataatrec[7]; 
    c2 = dataatrec[2] ^ dataatrec[3] ^ dataatrec[6] ^ dataatrec[7]; 
    c3 = dataatrec[4] ^ dataatrec[5] ^ dataatrec[6] ^ dataatrec[7]; 
    c = c3 * 4 + c2 * 2 + c1; 

    if (c == 0) { 
        cout << "\ncongratulations there is no error: "; 
    } else { 
        cout << "\nerror on the position: " << c; 
        cout << "\nCorrect message is:"; 
        
        if (dataatrec[c] == 0) 
            dataatrec[c] = 1; 
        else 
            dataatrec[c] = 0; 
        
        for (i = 1; i <= 7; i++) { 
            cout << dataatrec[i]; 
        } 
    } 
    return 0; 
}
*************************************************
GO BACK N SLIDING-
import java.io.*;

public class GoBackN {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.println("Please enter the No. of Frames: ");
        int frames = Integer.parseInt(br.readLine());
        
        System.out.println("Please enter the Window Size: ");
        int window = Integer.parseInt(br.readLine());
        
        boolean loop = true;
        int sent = 0;
        
        while (loop) {
            for (int i = sent; i < Math.min(sent + window, frames); i++) {
                System.out.println("Frame " + i + " has been sent.");
            }
            
            for (int i = sent; i < Math.min(sent + window, frames); i++) {
                System.out.println("Frame " + (i + 1) + " acknowledgement sent.");
            }
            
            System.out.println("Please enter the Acknowledgement not received.");
            int ack = Integer.parseInt(br.readLine());
            
            if (ack == frames) {
                loop = false;
            } else {
                sent = ack;
            }
        }
    }
}
**********************************************
SELECTIVE REPEAT MODES SLIDING WINDOW PROTOCOL-
import java.io.*;

public class Selective {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.println("Please enter the No. of Frames: ");
        int frames = Integer.parseInt(br.readLine());
        
        System.out.println("Please enter the Window Size: ");
        int window = Integer.parseInt(br.readLine());
        
        int count = 0;
        boolean loop = true;
        int sent = 0;
        
        while (loop) {
            for (int i = sent; i < Math.min(sent + window, frames); i++) {
                System.out.println("Frame " + i + " has been sent.");
            }
            
            for (int i = sent; i < Math.min(sent + window, frames); i++) {
                System.out.println("Frame " + (i + 1) + " acknowledgement sent.");
            }
            
            System.out.println("Please enter the Acknowledgement not received.");
            int ack = Integer.parseInt(br.readLine());
            System.out.println("Frame " + ack + " has been sent.");
            
            if (ack == frames) {
                loop = false;
            } else {
                sent = count += window;
            }
        }
    }
}
*****************************************************
SUBNETTING AND SUBNET MASKS-
import java.io.*;
import java.net.InetAddress;

public class Subnet1 {
    public static void main(String[] args) throws IOException {
        System.out.println("ENTER IP:");
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String ip = br.readLine();
        String checkclass = ip.substring(0, 3);
        int cc = Integer.parseInt(checkclass);
        String mask = null;
        
        if (cc > 0) {
            if (cc <= 127) {
                mask = "255.0.0.0";
                System.out.println("Class A IP Address");
                System.out.println("SUBNET MASK:\n" + mask);
            }
            if (cc >= 128 && cc <= 191) {
                mask = "255.255.0.0";
                System.out.println("Class B IP Address");
                System.out.println("SUBNET MASK:\n" + mask);
            }
            if (cc >= 192 && cc <= 223) {
                mask = "255.255.255.0";
                System.out.println("Class C IP Address");
                System.out.println("SUBNET MASK:\n" + mask);
            }
            if (cc >= 224 && cc <= 239) {
                mask = "255.0.0.0";
                System.out.println("Class D IP Address Used for multicasting");
            }
            if (cc >= 240 && cc <= 254) {
                mask = "255.0.0.0";
                System.out.println("Class E IP Address Experimental Use");
            }
        }
        
        String networkAddr = "";
        String lastAddr = "";
        String[] ipAddrParts = ip.split("\\.");
        String[] maskParts = mask.split("\\.");
        
        for (int i = 0; i < 4; i++) {
            int x = Integer.parseInt(ipAddrParts[i]);
            int y = Integer.parseInt(maskParts[i]);
            int z = x & y;
            networkAddr += z + ".";
            int w = z | (y ^ 255);
            lastAddr += w + ".";
        }
        
        System.out.println("First IP of block: " + networkAddr);
        System.out.println("Last IP of block: " + lastAddr);
    }
}
************************************************
TCP socket for wired network for following:
 1. Say Hello to Each other              2. File transfer 
*****Server.c****
import java.io.*;
import java.net.*;

public class Server {
    public static void main(String[] args) {
        final int PORT = 8080;
        final int BUFFER_SIZE = 1024;
        
        try {
            // Initialize server socket
            ServerSocket serverSocket = new ServerSocket(PORT);

            System.out.println("Server listening on port " + PORT);

            // Accept incoming connection
            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected");

            // Initialize input and output streams
            OutputStream outputStream = clientSocket.getOutputStream();
            InputStream inputStream = clientSocket.getInputStream();

            // Send "Hello" message to client
            outputStream.write("Hello from server".getBytes());
            System.out.println("Hello message sent to client");

            // Receive "Hello" message from client
            byte[] buffer = new byte[BUFFER_SIZE];
            int bytesRead = inputStream.read(buffer);
            String messageFromClient = new String(buffer, 0, bytesRead);
            System.out.println("Message from client: " + messageFromClient);

            // Open file for transfer
            File file = new File("example.txt");
            FileInputStream fileInputStream = new FileInputStream(file);

            // Send file size to client
            long fileSize = file.length();
            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
            dataOutputStream.writeLong(fileSize);

            // Transfer file content to client
            while ((bytesRead = fileInputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            System.out.println("File sent to client");

            // Close streams and socket
            fileInputStream.close();
            outputStream.close();
            inputStream.close();
            clientSocket.close();
            serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
****CLIENT*****
import java.io.*;
import java.net.*;

public class Client {
    public static void main(String[] args) {
        final String SERVER_IP = "127.0.0.1";
        final int PORT = 8080;
        final int BUFFER_SIZE = 1024;

        try {
            // Initialize socket and connect to server
            Socket clientSocket = new Socket(SERVER_IP, PORT);
            System.out.println("Connected to server");

            // Initialize input and output streams
            InputStream inputStream = clientSocket.getInputStream();
            OutputStream outputStream = clientSocket.getOutputStream();

            // Receive "Hello" message from server
            byte[] buffer = new byte[BUFFER_SIZE];
            int bytesRead = inputStream.read(buffer);
            String messageFromServer = new String(buffer, 0, bytesRead);
            System.out.println("Message from server: " + messageFromServer);

            // Send "Hello" message to server
            outputStream.write("Hello from client".getBytes());
            System.out.println("Hello message sent to server");

            // Receive file size from server
            DataInputStream dataInputStream = new DataInputStream(inputStream);
            long fileSize = dataInputStream.readLong();

            // Open file for writing
            File file = new File("received_file.txt");
            FileOutputStream fileOutputStream = new FileOutputStream(file);

            // Receive file content from server
            long receivedSize = 0;
            while (receivedSize < fileSize) {
                bytesRead = inputStream.read(buffer);
                fileOutputStream.write(buffer, 0, bytesRead);
                receivedSize += bytesRead;
            }

            System.out.println("File received from server");

            // Close streams and socket
            fileOutputStream.close();
            outputStream.close();
            inputStream.close();
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
****************************************************
A PROGRAM USING UDP SOCKETS TO ENABLE FILE TRANSFERS-
******SERVER*****-
import java.io.*;
import java.net.*;

public class Server {
    public static void main(String[] args) {
        final int PORT = 8000;
        final int MAXLEN = 70000;
      

        try {
            byte[] fileNameBuffer = new byte[100];
            byte[] fileBuffer = new byte[2000];
            byte[] fileDataBuffer = new byte[MAXLEN];

            DatagramSocket serverSocket = new DatagramSocket(PORT);

            System.out.println("Server listening on port " + PORT);

            while (true) {
                DatagramPacket receivePacket = new DatagramPacket(fileNameBuffer, fileNameBuffer.length);
                serverSocket.receive(receivePacket);

                int choice = receivePacket.getData()[0];

                switch (choice) {
                    case 1:
                        receivePacket = new DatagramPacket(fileBuffer, fileBuffer.length);
                        serverSocket.receive(receivePacket);
                        String receivedFileName = new String(receivePacket.getData()).trim();
                        System.out.println("NAME OF TEXT FILE RECEIVED : " + receivedFileName);

                        receivePacket = new DatagramPacket(fileDataBuffer, fileDataBuffer.length);
                        serverSocket.receive(receivePacket);
                        String fileContent = new String(receivePacket.getData()).trim();
                        System.out.println("Contents in the received text file : \n" + fileContent);

                        try (PrintWriter writer = new PrintWriter(receivedFileName)) {
                            writer.println(fileContent);
                            System.out.println("File received successfully.");
                        } catch (IOException e) {
                            System.out.println("Cannot create output file.");
                        }
                        break;

                    case 2:
                    case 3:
                        receivePacket = new DatagramPacket(fileNameBuffer, fileNameBuffer.length);
                        serverSocket.receive(receivePacket);
                        String audioOrVideoFileName = new String(receivePacket.getData()).trim();
                        System.out.println("NAME OF " + (choice == 2 ? "AUDIO" : "VIDEO") + " FILE RECEIVED : " + audioOrVideoFileName);

                        receivePacket = new DatagramPacket(fileDataBuffer, fileDataBuffer.length);
                        serverSocket.receive(receivePacket);
                        FileOutputStream fileOutputStream = new FileOutputStream(audioOrVideoFileName);
                        fileOutputStream.write(receivePacket.getData(), 0, receivePacket.getLength());
                        fileOutputStream.close();
                        System.out.println("File received successfully.");
                        break;

                    case 4:
                        serverSocket.close();
                        System.exit(0);
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
*****CLIENT*****-
import java.io.*;
import java.net.*;

public class Client {
    public static void main(String[] args) {
        final int PORT = 8000;
        final int MAXLEN = 2000;

        try {
            DatagramSocket clientSocket = new DatagramSocket();
            InetAddress serverAddress = InetAddress.getLocalHost();

            byte[] fileNameBuffer = new byte[MAXLEN];
            byte[] fileBuffer = new byte[MAXLEN];
            byte[] numBuffer = new byte[1];

            BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));

            int choice = 1;

            while (choice != 4) {
                System.out.println("ENTER \n 1.TEXT \n 2.AUDIO \n 3.VIDEO\n4.EXIT");
                choice = Integer.parseInt(inputReader.readLine());

                numBuffer[0] = (byte) choice;
                DatagramPacket numPacket = new DatagramPacket(numBuffer, numBuffer.length, serverAddress, PORT);
                clientSocket.send(numPacket);

                switch (choice) {
                    case 1:
                        System.out.println("Enter text file name to send:");
                        String fileName = inputReader.readLine();
                        byte[] fileNameBytes = fileName.getBytes();
                        DatagramPacket fileNamePacket = new DatagramPacket(fileNameBytes, fileNameBytes.length, serverAddress, PORT);
                        clientSocket.send(fileNamePacket);

                        System.out.println("Enter text file content:");
                        String fileContent = inputReader.readLine();
                        byte[] fileContentBytes = fileContent.getBytes();
                        DatagramPacket fileContentPacket = new DatagramPacket(fileContentBytes, fileContentBytes.length, serverAddress, PORT);
                        clientSocket.send(fileContentPacket);
                        break;

                    case 2:
                        System.out.println("Enter audio file name to send:");
                        String afileName = inputReader.readLine();
                        byte[] afileNameBytes = afileName.getBytes();
                        DatagramPacket afileNamePacket = new DatagramPacket(afileNameBytes, afileNameBytes.length, serverAddress, PORT);
                        clientSocket.send(afileNamePacket);

                        System.out.println("Reading audio file...");
                        File audioFile = new File(afileName);
                        FileInputStream audioInputStream = new FileInputStream(audioFile);
                        byte[] audioData = new byte[(int) audioFile.length()];
                        audioInputStream.read(audioData);
                        audioInputStream.close();
                        DatagramPacket audioPacket = new DatagramPacket(audioData, audioData.length, serverAddress, PORT);
                        clientSocket.send(audioPacket);
                        break;

                    case 3:
                        System.out.println("Enter video file name to send:");
                        String vfileName = inputReader.readLine();
                        byte[] vfileNameBytes = vfileName.getBytes();
                        DatagramPacket vfileNamePacket = new DatagramPacket(vfileNameBytes, vfileNameBytes.length, serverAddress, PORT);
                        clientSocket.send(vfileNamePacket);

                        System.out.println("Reading video file...");
                        File videoFile = new File(vfileName);
                        FileInputStream videoInputStream = new FileInputStream(videoFile);
                        byte[] videoData = new byte[(int) videoFile.length()];
                        videoInputStream.read(videoData);
                        videoInputStream.close();
                        DatagramPacket videoPacket = new DatagramPacket(videoData, videoData.length, serverAddress, PORT);
                        clientSocket.send(videoPacket);
                        break;

                    case 4:
                        clientSocket.close();
                        break;

                    default:
                        System.out.println("Invalid choice. Please enter again.");
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
***********************************************************
Write a program to implement:

a. Network Routing: Shortest path routing, AODV 

#include <stdio.h>
#include <limits.h>

// Number of nodes in the network
#define V 6

// Function to find the node with the shortest distance
int minDistance(int dist[], int visited[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (visited[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the path from source to destination
void printPath(int parent[], int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);
    printf("%d ", j);
}

// Function to print the shortest path from source to destination
void printSolution(int dist[], int n, int parent[], int src, int dest) {
    printf("Shortest path from %d to %d: ", src, dest);
    printf("%d ", src);
    printPath(parent, dest);
    printf("\n");
}

// Function to implement AODV routing
void AODV(int graph[V][V], int src, int dest) {
    int dist[V];        // Array to store shortest distance from source to i
    int visited[V];     // Array to mark visited nodes
    int parent[V];      // Array to store the shortest path tree

    // Initialize all distances as INFINITE and visited[] as 0
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
        parent[i] = -1;
    }

    // Distance of source vertex from itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);

        // Mark the picked node as visited
        visited[u] = 1;

        // Update dist value of the adjacent vertices of the picked node.
        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                parent[v] = u;
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the shortest path
    printSolution(dist, V, parent, src, dest);
}

int main() {
    // Example graph representing the network topology
    int graph[V][V] = {
        {0, 1, 4, 0, 0, 0},
        {1, 0, 4, 2, 7, 0},
        {4, 4, 0, 3, 5, 0},
        {0, 2, 3, 0, 4, 6},
        {0, 7, 5, 4, 0, 7},
        {0, 0, 0, 6, 7, 0}
    };

    // Source and destination nodes
    int src = 0, dest = 5;

    // Run AODV routing algorithm
    AODV(graph, src, dest);

    return 0;
}
